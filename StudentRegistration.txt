StudentRegistration

package com.pack.Model;

import java.util.Date;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;
import org.springframework.format.annotation.DateTimeFormat;
@Entity
@Table(name="stud3000")
public class Student {
	@Id
	private Integer studentid;
	@NotEmpty()
	@Size(min=6,max=25)
	private String name;
	@NotNull()
	@Min(value=3)
	@Max(value=20)
	private Integer age;
	@NotEmpty()
	private String address;
	@NotNull()
	@DateTimeFormat(pattern="yyyy-MM-dd")
	private Date dob;
	@NotEmpty()
	private String gender;
	public Integer getStudentid() {
		return studentid;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Integer getAge() {
		return age;
	}

	public void setAge(Integer age) {
		this.age = age;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public Date getDob() {
		return dob;
	}

	public void setDob(Date dob) {
		this.dob = dob;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public void setStudentid(Integer studentid) {
		this.studentid = studentid;
	}

	public Student() {
		super();
	}
	public Student(Integer studentid, String name, Integer age, String address, Date dob, String gender) {
		super();
		this.studentid = studentid;
		this.name = name;
		this.age = age;
		this.address = address;
		this.dob = dob;
		this.gender = gender;
	}
	

}
->
StudentController

package com.pack.Controller;

import java.util.List;
import java.util.Random;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import com.pack.Model.Student;
import com.pack.Service.StudentService;

@Controller
public class StudentController {
	Logger logger=Logger.getLogger(StudentController.class);
    
	@Autowired
	private StudentService studentService;
	
	@RequestMapping(value="/")
	public String studentRegistrationPage(ModelMap map) {
		logger.info("Inside studentRegistrationPage()");
		Student student=new Student();
		map.addAttribute("studentForm",student);
		return "StudentRegister";
	}
	
	@RequestMapping(value="/insertStud",method=RequestMethod.POST)
	public String saveStudent(@Validated @ModelAttribute("studentForm")Student stud,
			BindingResult result,ModelMap map) {
		logger.info("Inside saveStudent()");
		String response="";
		if(result.hasErrors()) {
			response="StudentRegister";
		}
		else {
			Random r=new Random();
			int studid=r.nextInt(9999)+10000;
			stud.setStudentid(studid);
			studentService.insertStudent(stud);
			List<Student> studList=studentService.fetchAllStudent();
			map.addAttribute("studentList",studList);
			response="StudentSuccess";
		}
		return response;
	}
	@RequestMapping(value="/deleteStud/{id}")
	public String deleteStudent(@PathVariable("id") Integer studId,ModelMap map) {
		logger.info("Inside deleteStudent()");
		studentService.deleteStudent(studId);
		List<Student> studList=studentService.fetchAllStudent();
		map.addAttribute("studentList",studList);
		return "StudentSuccess";
	}
	@RequestMapping(value="/fetchById/{sid}")
	public String fetchStudentById(@PathVariable("sid") Integer studId,ModelMap map) {
		logger.info("Inside fetchStudentById()");
		Student student=studentService.fetchStudentById(studId);
		map.addAttribute("editForm",student);
		return "StudentUpdate";
	}
	@RequestMapping(value="/updateStud",method=RequestMethod.POST)
	public String updateStudent(@Validated@ModelAttribute("editForm") Student stud,BindingResult result,ModelMap map) {
		logger.info("Inside updateStudent()");
		String response="";
		if(result.hasErrors()) {
			response="StudentUpdate";
		}
		else {
			studentService.updateStudent(stud);
			List<Student> studList=studentService.fetchAllStudent();
			map.addAttribute("studentList",studList);
			response="StudentSuccess";
		}
		return response;
	}

}


->
StudentDao
package com.pack.Dao;

import java.util.List;

import com.pack.Model.Student;

public interface StudentDao {
	   public void insertStudent(Student stud);
	   public List<Student> fetchAllStudent();
	   public void deleteStudent(int studId);
	   public Student fetchStudentById(Integer studId);
	   public void updateStudent(Student stud);

}
->
StudentDaoImpl

package com.pack.Dao;

import java.util.List;

import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


import com.pack.Model.Student;
@Repository
public class StudentDaoImpl implements StudentDao {
	
	Logger logger=Logger.getLogger(StudentDaoImpl.class);
	
	@Autowired
	private SessionFactory sessionfactory;

	@Override
	public void insertStudent(Student stud) {
		logger.info("Inside insertStudent() dao");
		sessionfactory.getCurrentSession().save(stud);
		
	}

	@Override
	public List<Student> fetchAllStudent() {
		logger.info("Inside fetchAllStudent() dao");
		Query query=sessionfactory.getCurrentSession().createQuery("select s from Student s");
		List slist=query.list();
		return slist;
	}

	@Override
	public void deleteStudent(int studId) {
		logger.info("Inside deleteStudent() dao");
		Student stud=(Student)sessionfactory.getCurrentSession().get(Student.class, studId);
		sessionfactory.getCurrentSession().delete(stud);
		
	}

	@Override
	public Student fetchStudentById(Integer studId) {
		logger.info("Inside fetchStudentById() dao");
		Student stud=(Student)sessionfactory.getCurrentSession().get(Student.class, studId);
		return stud;
	}

	@Override
	public void updateStudent(Student stud) {
		logger.info("Inside updateStudent() dao");
		sessionfactory.getCurrentSession().update(stud);
		
	}
	

}


->
StudentService

package com.pack.Service;

import java.util.List;

import com.pack.Model.Student;

public interface StudentService {
	public void insertStudent(Student stud);
	public List<Student> fetchAllStudent();
	public void deleteStudent(int studId);
	public Student fetchStudentById(Integer studId);
	public void updateStudent(Student stud);
}

->

package com.pack.Service;

import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.pack.Dao.StudentDao;
import com.pack.Model.Student;


@Service
@Transactional
public class StudentServiceImpl implements StudentService {
	Logger logger=Logger.getLogger(StudentServiceImpl.class);
	
	@Autowired
	private StudentDao studentDao;

	@Override
	public void insertStudent(Student stud) {
		logger.info("Inside insertStudent() service");
		studentDao.insertStudent(stud);
		
	}

	@Override
	public List<Student> fetchAllStudent() {
		logger.info("Inside fetchAllStudent() service");
		List<Student> studList=studentDao.fetchAllStudent();
		return studList;
	}

	@Override
	public void deleteStudent(int studId) {
		logger.info("Inside deleteStudent() service");
		studentDao.deleteStudent(studId);
		
	}

	@Override
	public Student fetchStudentById(Integer studId) {
		logger.info("Inside fetchStudentById() service");
		Student stud=studentDao.fetchStudentById(studId);
		return stud;
	}

	@Override
	public void updateStudent(Student stud) {
		logger.info("Inside updateStudent() service");
		studentDao.updateStudent(stud);
		
	}

}

->

log4j


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">

<log4j:configuration
	xmlns:log4j="http://jakarta.apache.org/log4j/">


	<appender name="console"
		class="org.apache.log4j.ConsoleAppender">

		<param name="Target" value="System.out" />

		<layout class="org.apache.log4j.PatternLayout">

			<param name="ConversionPattern"
				value="%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n" />

		</layout>

	</appender>



	<appender name="fileAppender"
		class="org.apache.log4j.RollingFileAppender">

		<param name="File" value="demoApplication.log" />

		<layout class="org.apache.log4j.PatternLayout">

			<param name="ConversionPattern"
				value="%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n" />

		</layout>

	</appender>



	<logger name="com.pack">

		<level value="info" />

	</logger>



	<!-- 3rdparty Loggers -->

	<logger name="org.springframework.core">

		<level value="info" />

	</logger>



	<logger name="org.hibernate">

		<level value="info" />

	</logger>



	<logger name="org.springframework.beans">

		<level value="info" />

	</logger>



	<logger name="org.springframework.context">

		<level value="info" />

	</logger>


	<logger name="org.springframework.web">

		<level value="info" />

	</logger>


	<!-- Root Logger -->

	<root>

		<priority value="warn" />

		<appender-ref ref="console" />

		<appender-ref ref="fileAppender" />

	</root>



</log4j:configuration



->


message.properties

NotEmpty.studentForm.name=*Name should not be empty
Size.studentForm.name=*Name should be between {1} and {2} characters
NotNull.studentForm.age=*Age should not be empty
Min.studentForm.age=*Age should not be less than {1} years
Max.studentForm.age=*Age should not be more than {1} years
NotEmpty.studentForm.address=*Address should not be empty
NotEmpty.studentForm.gender=*Please select any one gender
NotNull.studentForm.dob=*Please select proper Date of Join

->
student.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
    <%@ taglib uri="http://www.springframework.org/tags/form" prefix="form" %>
    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Student Registration Page</title>
</head>
<body>
<h3>Employee Registration form</h3>
<c:url var="studAction" value="/insertStud"/>
<form:form action="${studAction}" method="post" modelAttribute="studentForm">
<table>
  <tr>
     <td>Student Name:</td>
     <td><form:input type="text" path="name"/><font color="red"><form:errors path="name"/></font></td>
  </tr>
  <tr>
     <td>Student Age:</td>
     <td><form:input type="text" path="age"/><font color="red"><form:errors path="age"/></font></td>
  </tr>
  <tr>
     <td>Student Address:</td>
     <td><form:input type="text" path="address"/><font color="red"><form:errors path="address"/></font></td>
  </tr>
  <tr>
     <td>Gender</td>
     <td><form:radiobutton path="gender" value="male"/>Male
         <form:radiobutton path="gender" value="female"/>Female
         <font color="red"><form:errors path="gender"/></font>
     </td>
  </tr>
   <tr>
     <td>Date of Birth:</td>
     <td><form:input type="date" path="dob"/><font color="red"><form:errors path="dob"/></font></td>
  </tr>
     <td><input type="submit" value="Add Student"/></td>
     <td><input type="reset" value="Cancel"/></td>
  </tr>
</table>
</form:form>
</body>
</html>



->
studentSuccess

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
    <%@ taglib uri="http://www.springframework.org/tags/form" prefix="form" %>
    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Student Registration Page</title>
</head>
<body>
<h3>Employee Registration form</h3>
<c:url var="studAction" value="/insertStud"/>
<form:form action="${studAction}" method="post" modelAttribute="studentForm">
<table>
  <tr>
     <td>Student Name:</td>
     <td><form:input type="text" path="name"/><font color="red"><form:errors path="name"/></font></td>
  </tr>
  <tr>
     <td>Student Age:</td>
     <td><form:input type="text" path="age"/><font color="red"><form:errors path="age"/></font></td>
  </tr>
  <tr>
     <td>Student Address:</td>
     <td><form:input type="text" path="address"/><font color="red"><form:errors path="address"/></font></td>
  </tr>
  <tr>
     <td>Gender</td>
     <td><form:radiobutton path="gender" value="male"/>Male
         <form:radiobutton path="gender" value="female"/>Female
         <font color="red"><form:errors path="gender"/></font>
     </td>
  </tr>
   <tr>
     <td>Date of Birth:</td>
     <td><form:input type="date" path="dob"/><font color="red"><form:errors path="dob"/></font></td>
  </tr>
     <td><input type="submit" value="Add Student"/></td>
     <td><input type="reset" value="Cancel"/></td>
  </tr>
</table>
</form:form>
</body>
</html>


->

StudentUpdate


<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
    <%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Student Updation Page</title>
</head>
<body>
<h3>Student Updation Details</h3>
	<c:url var="updateaction" value="/updateStud" />
	<form:form action="${updateaction }" method="post"
		modelAttribute="editForm">
		<table>
			<tr>
				<td>Student Id:</td>
				<td><form:input type="text" path="studentid" readonly="true" /></td>
			</tr>
			<tr>
				<td>Student Name:</td>
				<td><form:input type="text" path="name" /><font color="red"><form:errors
							path="name" /></font></td>
			</tr>
			<tr>
				<td>Student Age:</td>
				<td><form:input type="text" path="age" readonly="true" /></td>
			</tr>
			<tr>
				<td>Student Address:</td>
				<td><form:input type="text" path="address" /><font color="red"><form:errors
							path="address" /></td>
			</tr>
			<tr>
				<td>Gender</td>
				<td><form:radiobutton path="gender" value="male"
						onclick="return false" />Male <form:radiobutton path="gender"
						value="female" onclick="return false" />Female</td>
			</tr>
			<tr>
				<td>Date of Birth:</td>
				<td><form:input type="text" path="dob" /><font color="red"><form:errors
							path="dob" /></td>
			</tr>
			<td><input type="submit" value="Update Student" /></td>
			</tr>
		</table>
	</form:form>
</body>
</html>



->
Spring

-->
dispatcher-Servlet.xml


<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"

	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

	xmlns:beans="http://www.springframework.org/schema/beans"

	xmlns:context="http://www.springframework.org/schema/context"

	xmlns:tx="http://www.springframework.org/schema/tx"

	xmlns:p="http://www.springframework.org/schema/p"

	xmlns:mvc="http://www.springframework.org/schema/mvc"

	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd

              http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd

              http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd

              http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd

              http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<context:component-scan base-package="com.pack" />

	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/jsp/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<mvc:annotation-driven />

	<beans:bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<beans:property name="location"
			value="/WEB-INF/jdbc.properties"></beans:property>
	</beans:bean>

	<beans:bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<beans:property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<beans:property name="url" value="${jdbc.databaseurl}" />
		<beans:property name="username"
			value="${jdbc.username}" />
		<beans:property name="password"
			value="${jdbc.password}" />
	</beans:bean>

    
    <beans:bean id="sessionFactory"
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource" />
        <beans:property name="annotatedClasses">
            <beans:list>
                <beans:value>com.pack.Model.Student</beans:value>
            </beans:list>
        </beans:property>
        <beans:property name="hibernateProperties">
            <beans:props>
                <beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect
                </beans:prop>
                <beans:prop key="hibernate.show_sql">true</beans:prop>
                <beans:prop key="hibernate.hbm2ddl.auto">update</beans:prop>
            </beans:props>
        </beans:property>
    </beans:bean>
    
    <tx:annotation-driven
        transaction-manager="transactionManager" />

 

    <beans:bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <beans:property name="sessionFactory"
            ref="sessionFactory" />
    </beans:bean>
    
    <beans:bean id="messageSource"
        class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <beans:property name="basename"
            value="classpath:messages" />
    </beans:bean>
    
</beans:beans>


->
jdbc properties

jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.dialect=org.hibernate.dialect.MySQLDialect
jdbc.databaseurl=jdbc:mysql://localhost:3306/Hibernate?useSSL=false
jdbc.username=root
jdbc.password=Siva@123


->

web.xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">

	<display-name>SpringExample11</display-name>

	<servlet>

		<servlet-name>appServlet</servlet-name>

		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/dispatcher-servlet.xml</param-value>
		</init-param>

		<load-on-startup>1</load-on-startup>

	</servlet>

	<servlet-mapping>

		<servlet-name>appServlet</servlet-name>

		<url-pattern>/</url-pattern>

	</servlet-mapping>

</web-app>


->
pom.xml



<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.pack</groupId>
	<artifactId>StudentRegistration</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>StudentRegistration</name>
	<properties>

		<java-version>1.8</java-version>

		<org.springframework-version>4.0.3.RELEASE</org.springframework-version>

		<org.aspectj-version>1.7.4</org.aspectj-version>

		<org.slf4j-version>1.7.5</org.slf4j-version>

		<hibernate.version>4.3.5.Final</hibernate.version>

	</properties>

	<dependencies>

		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->

		<dependency>

			<groupId>mysql</groupId>

			<artifactId>mysql-connector-java</artifactId>

			<version>8.0.11</version>
		</dependency>

		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.1.0.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>5.4.3.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator-annotation-processor</artifactId>
			<version>5.4.3.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator-cdi</artifactId>
			<version>5.4.3.Final</version>
		</dependency>
		<dependency>
			<groupId>org.jboss.logging</groupId>
			<artifactId>jboss-logging</artifactId>
			<version>3.3.0.Final</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish</groupId>
			<artifactId>javax.el</artifactId>
			<version>3.0.1-b08</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml</groupId>
			<artifactId>classmate</artifactId>
			<version>1.3.1</version>
		</dependency>

		<!-- Spring -->

		<dependency>

			<groupId>org.springframework</groupId>

			<artifactId>spring-context</artifactId>

			<version>${org.springframework-version}</version>

			<exclusions>

				<!-- Exclude Commons Logging in favor of SLF4j -->

				<exclusion>

					<groupId>commons-logging</groupId>

					<artifactId>commons-logging</artifactId>

				</exclusion>

			</exclusions>

		</dependency>

		<dependency>

			<groupId>org.springframework</groupId>

			<artifactId>spring-webmvc</artifactId>

			<version>${org.springframework-version}</version>

		</dependency>

		<dependency>

			<groupId>org.springframework</groupId>

			<artifactId>spring-tx</artifactId>

			<version>${org.springframework-version}</version>

		</dependency>



		<!-- Hibernate -->

		<dependency>

			<groupId>org.hibernate</groupId>

			<artifactId>hibernate-core</artifactId>

			<version>${hibernate.version}</version>

		</dependency>

		<dependency>

			<groupId>org.hibernate</groupId>

			<artifactId>hibernate-entitymanager</artifactId>

			<version>${hibernate.version}</version>

		</dependency>



		<!-- Apache Commons DBCP -->

		<dependency>

			<groupId>commons-dbcp</groupId>

			<artifactId>commons-dbcp</artifactId>

			<version>1.4</version>

		</dependency>

		<!-- Spring ORM -->

		<dependency>

			<groupId>org.springframework</groupId>

			<artifactId>spring-orm</artifactId>

			<version>${org.springframework-version}</version>

		</dependency>



		<!-- AspectJ -->

		<dependency>

			<groupId>org.aspectj</groupId>

			<artifactId>aspectjrt</artifactId>

			<version>${org.aspectj-version}</version>

		</dependency>



		<!-- Logging -->

		<dependency>

			<groupId>org.slf4j</groupId>

			<artifactId>slf4j-api</artifactId>

			<version>${org.slf4j-version}</version>

		</dependency>

		<dependency>

			<groupId>org.slf4j</groupId>

			<artifactId>jcl-over-slf4j</artifactId>

			<version>${org.slf4j-version}</version>

			<scope>runtime</scope>

		</dependency>

		<dependency>

			<groupId>org.slf4j</groupId>

			<artifactId>slf4j-log4j12</artifactId>

			<version>${org.slf4j-version}</version>

			<scope>runtime</scope>

		</dependency>

		<!-- https://mvnrepository.com/artifact/log4j/log4j -->

		<dependency>

			<groupId>log4j</groupId>

			<artifactId>log4j</artifactId>

			<version>1.2.17</version>

		</dependency>











		<!-- @Inject -->

		<dependency>

			<groupId>javax.inject</groupId>

			<artifactId>javax.inject</artifactId>

			<version>1</version>

		</dependency>

		<dependency>

			<groupId>javax.servlet</groupId>

			<artifactId>servlet-api</artifactId>

			<version>2.5</version>

			<scope>provided</scope>

		</dependency>

		<dependency>

			<groupId>javax.servlet.jsp</groupId>

			<artifactId>jsp-api</artifactId>

			<version>2.1</version>

			<scope>provided</scope>

		</dependency>

		<dependency>

			<groupId>javax.servlet</groupId>

			<artifactId>jstl</artifactId>

			<version>1.2</version>

		</dependency>

		<!-- Testing -->

		<dependency>

			<groupId>junit</groupId>

			<artifactId>junit</artifactId>

			<version>4.12</version>

			<scope>test</scope>

			<exclusions>

				<exclusion>

					<groupId>org.hamcrest</groupId>

					<artifactId>hamcrest-core</artifactId>

				</exclusion>

			</exclusions>

		</dependency>

		<dependency>

			<groupId>org.springframework</groupId>

			<artifactId>spring-test</artifactId>

			<version>4.3.1.RELEASE</version>

			<scope>test</scope>

		</dependency>

		<dependency>

			<groupId>org.hamcrest</groupId>

			<artifactId>hamcrest-all</artifactId>

			<version>1.3</version>

			<scope>test</scope>

		</dependency>

		<dependency>

			<groupId>org.mockito</groupId>

			<artifactId>mockito-core</artifactId>

			<version>1.10.19</version>

			<exclusions>

				<exclusion>

					<groupId>org.hamcrest</groupId>

					<artifactId>hamcrest-core</artifactId>

				</exclusion>

			</exclusions>

			<scope>test</scope>

		</dependency>

		<dependency>

			<groupId>com.jayway.jsonpath</groupId>

			<artifactId>json-path-assert</artifactId>

			<version>2.2.0</version>

			<scope>test</scope>

			<exclusions>

				<exclusion>

					<groupId>org.hamcrest</groupId>

					<artifactId>hamcrest-core</artifactId>

				</exclusion>

				<exclusion>

					<groupId>org.slf4j</groupId>

					<artifactId>slf4j-api</artifactId>

				</exclusion>

			</exclusions>

		</dependency>







	</dependencies>



	<build>

		<testSourceDirectory>src/main/test</testSourceDirectory>

		<resources>

			<resource>

				<directory>src/main/resources</directory>

				<excludes>

					<exclude>**/*.java</exclude>

				</excludes>

			</resource>

			<resource>

				<directory>src/test/java</directory>

				<excludes>

					<exclude>**/*.java</exclude>

				</excludes>

			</resource>

			<resource>

				<directory>src/test/resources</directory>

				<excludes>

					<exclude>**/*.java</exclude>

				</excludes>

			</resource>

			<resource>

				<directory>src/main/webapp</directory>

				<excludes>

					<exclude>**/*.java</exclude>

				</excludes>

			</resource>

		</resources>

		<plugins>

			<plugin>

				<artifactId>maven-war-plugin</artifactId>

				<version>2.3</version>

				<configuration>

					<failOnMissingWebXml>false</failOnMissingWebXml>

				</configuration>

			</plugin>

			<plugin>

				<artifactId>maven-compiler-plugin</artifactId>

				<version>3.1</version>

				<configuration>

					<source>1.8</source>

					<target>1.8</target>

				</configuration>

			</plugin>

		</plugins>

	</build>




</project>





